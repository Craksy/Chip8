#+TITLE: CHIP-8

* About
This is a CHIP-8 emulator written in C#.

From Wikipedia:
#+begin_quote
CHIP-8 is an interpreted programming language, developed by Joseph Weisbecker.
It was initially used on the COSMAC VIP and Telmac 1800 8-bit microcomputers in
the mid-1970s. CHIP-8 programs are run on a CHIP-8 virtual machine. It was made
to allow video games to be more easily programmed for these computers.
#+end_quote

This is a little toy project I'm making to get familiar with C#.
It's probably filled with weird solutions and questionable design
decisions.

Suggestions and feedback is very welcome, and would be greatly appreciated.


* Spec
For a more detailed spec, including instruction set, check out the [[https://en.wikipedia.org/wiki/CHIP-8#Virtual_machine_description][Wikipedia article]]
Which is more or less the only resource i used while writing this.

** Memory
Chip8 is an 8bit system with 0x1000 memory locations. The first 0x200 (512) bytes
was traditionally where the interpreter was lived, but in most emulators
(this one included) this space is used for font data instead.

The uppermost 0xFF (256) bytes are reserved for the screen buffer.
Traditionally the next 96 bytes below that was used for the call stack and other internal features, but i implemented the stack seperate from memory.

This leaves the space 0x200-0xF00 for actual programs to run.

** Registers
There are 16 8bit registers named V0 to VF, although VF is used as the carry flag for many instructions, and shouldn't be used as a general purpose register.

Additionally there is a 16bit address register.

** Call stack
Original Chip8 systems had a 48 byte stack which allowed for 12 levels of nesting.
This one has 512 bytes for 128 levels.

** Timers
There's are two timers, a delay timer and a sound timer, both counting down at 60Hz when not 0.

** Input
Input comes from a hex keyboard. Most often the 16 keys are mapped to numpad keys.

** Graphic
Chip8 uses a 64x32px monochrome display. The upper 256 bytes of memory acts as a screenbuffer where each bit represents one pixel.

* Todo

- Implement the rest of the actual emulator
- Most of the instructions are implemented by now, but there are still a few bugs that need to be fixed.
- Make an interface for changing settings and loading ROMs
Sort of done, but I'll propbably redo this at some point.
- Debug utility/visualizer
TODO
- Pseudo assembler/disassembler
TODO
** Figure out a solution for clock rate throttleling
TODO
